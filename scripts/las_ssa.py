# Import libraries
import numpy as np

def art_ssa(rfl_1064, cos_sza, g=0.85, b=1.6):
    '''

    https://doi.org/10.3389/fenvs.2021.644551

    Retrieval of Dust Properties From Spectral Snow Reflectance Measurements
    adapted from Alexander Kokhanovsky et al 2021


    '''

    # wl in nm
    wl2008 = 1000*np.array([
    1.990E-001, 2.010E-001, 2.019E-001, 2.100E-001, 2.500E-001, 3.000E-001, 3.500E-001, 3.900E-001, 4.000E-001, 4.100E-001, 4.200E-001, 4.300E-001, 4.400E-001, 4.500E-001, 4.600E-001, 4.700E-001, 4.800E-001, 4.900E-001, 5.000E-001, 5.100E-001, 5.200E-001, 5.300E-001, 5.400E-001, 5.500E-001, 5.600E-001, 5.700E-001, 5.800E-001, 5.900E-001, 6.000E-001, 6.100E-001, 6.200E-001, 6.300E-001, 6.400E-001, 6.500E-001, 6.600E-001, 6.700E-001, 6.800E-001, 6.900E-001, 7.000E-001, 7.100E-001, 7.200E-001, 7.300E-001, 7.400E-001, 7.500E-001, 7.600E-001, 7.700E-001, 7.800E-001, 7.900E-001, 8.000E-001, 8.100E-001, 8.200E-001, 8.300E-001, 8.400E-001, 8.500E-001, 8.600E-001, 8.700E-001, 8.800E-001, 8.900E-001, 9.000E-001, 9.100E-001, 9.200E-001, 9.300E-001, 9.400E-001, 9.500E-001, 9.600E-001, 9.700E-001, 9.800E-001, 9.900E-001, 1.000E+000, 1.010E+000, 1.020E+000, 1.030E+000, 1.040E+000, 1.050E+000, 1.060E+000, 1.070E+000, 1.080E+000, 1.090E+000, 1.100E+000, 1.110E+000, 1.120E+000, 1.130E+000, 1.140E+000, 1.150E+000, 1.160E+000, 1.170E+000, 1.180E+000, 1.190E+000, 1.200E+000, 1.210E+000, 1.220E+000, 1.230E+000, 1.240E+000, 1.250E+000, 1.260E+000, 1.270E+000, 1.280E+000, 1.290E+000, 1.300E+000, 1.310E+000, 1.320E+000, 1.330E+000, 1.340E+000, 1.350E+000, 1.360E+000, 1.370E+000, 1.380E+000, 1.390E+000, 1.400E+000, 1.410E+000, 1.420E+000, 1.430E+000, 1.440E+000, 1.449E+000, 1.460E+000, 1.471E+000, 1.481E+000, 1.493E+000, 1.504E+000, 1.515E+000, 1.527E+000, 1.538E+000, 1.563E+000, 1.587E+000, 1.613E+000, 1.650E+000, 1.680E+000, 1.700E+000, 1.730E+000, 1.760E+000, 1.800E+000, 1.830E+000, 1.840E+000, 1.850E+000, 1.855E+000, 1.860E+000, 1.870E+000, 1.890E+000, 1.905E+000, 1.923E+000, 1.942E+000, 1.961E+000, 1.980E+000, 2.000E+000, 2.020E+000, 2.041E+000, 2.062E+000, 2.083E+000, 2.105E+000, 2.130E+000, 2.150E+000, 2.170E+000, 2.190E+000, 2.220E+000, 2.240E+000, 2.245E+000, 2.250E+000, 2.260E+000, 2.270E+000, 2.290E+000, 2.310E+000, 2.330E+000, 2.350E+000, 2.370E+000, 2.390E+000, 2.410E+000, 2.430E+000, 2.460E+000, 2.500E+000, 2.520E+000, 2.550E+000, 2.565E+000, 2.580E+000, 2.590E+000, 2.600E+000, 2.620E+000, 2.675E+000, 2.725E+000, 2.778E+000, 2.817E+000, 2.833E+000, 2.849E+000, 2.865E+000, 2.882E+000, 2.899E+000, 2.915E+000, 2.933E+000, 2.950E+000, 2.967E+000, 2.985E+000, 3.003E+000])

    refice2008_i = np.array([9.565E-011, 3.249E-011, 2.0E-011, 2.0E-011, 2.0E-011, 2.0E-011, 2.0E-011, 2.0E-011, 2.365E-011, 2.669E-011, 3.135E-011, 4.140E-011, 6.268E-011, 9.239E-011, 1.325E-010, 1.956E-010, 2.861E-010, 4.172E-010, 5.889E-010, 8.036E-010, 1.076E-009, 1.409E-009, 1.813E-009, 2.289E-009, 2.839E-009, 3.461E-009, 4.159E-009, 4.930E-009, 5.730E-009, 6.890E-009, 8.580E-009, 1.040E-008, 1.220E-008, 1.430E-008, 1.660E-008, 1.890E-008, 2.090E-008, 2.400E-008, 2.900E-008, 3.440E-008, 4.030E-008, 4.300E-008, 4.920E-008, 5.870E-008, 7.080E-008, 8.580E-008, 1.020E-007, 1.180E-007, 1.340E-007, 1.400E-007, 1.430E-007, 1.450E-007, 1.510E-007, 1.830E-007, 2.150E-007, 2.650E-007, 3.350E-007, 3.920E-007, 4.200E-007, 4.440E-007, 4.740E-007, 5.110E-007, 5.530E-007, 6.020E-007, 7.550E-007, 9.260E-007, 1.120E-006, 1.330E-006, 1.620E-006, 2.000E-006, 2.250E-006, 2.330E-006, 2.330E-006, 2.170E-006, 1.960E-006, 1.810E-006, 1.740E-006, 1.730E-006, 1.700E-006, 1.760E-006, 1.820E-006, 2.040E-006, 2.250E-006, 2.290E-006, 3.040E-006, 3.840E-006, 4.770E-006, 5.760E-006, 6.710E-006, 8.660E-006, 1.020E-005, 1.130E-005, 1.220E-005, 1.290E-005, 1.320E-005, 1.350E-005, 1.330E-005, 1.320E-005, 1.320E-005, 1.310E-005, 1.320E-005, 1.320E-005, 1.340E-005, 1.390E-005, 1.420E-005, 1.480E-005, 1.580E-005, 1.740E-005, 1.980E-005, 3.442E-005, 5.959E-005, 1.028E-004, 1.516E-004, 2.030E-004, 2.942E-004, 3.987E-004, 4.941E-004, 5.532E-004, 5.373E-004, 5.143E-004, 4.908E-004, 4.594E-004, 3.858E-004, 3.105E-004, 2.659E-004, 2.361E-004, 2.046E-004, 1.875E-004, 1.650E-004, 1.522E-004, 1.411E-004, 1.302E-004, 1.310E-004, 1.339E-004, 1.377E-004, 1.432E-004, 1.632E-004, 2.566E-004, 4.081E-004, 7.060E-004, 1.108E-003, 1.442E-003, 1.614E-003, 1.640E-003, 1.566E-003, 1.458E-003, 1.267E-003, 1.023E-003, 7.586E-004, 5.255E-004, 4.025E-004, 3.235E-004, 2.707E-004, 2.228E-004, 2.037E-004, 2.026E-004, 2.035E-004, 2.078E-004, 2.171E-004, 2.538E-004, 3.138E-004, 3.858E-004, 4.591E-004, 5.187E-004, 5.605E-004, 5.956E-004, 6.259E-004, 6.820E-004, 7.530E-004, 7.685E-004, 7.647E-004, 7.473E-004, 7.392E-004, 7.437E-004, 7.543E-004, 8.059E-004, 1.367E-003, 3.508E-003, 1.346E-002, 3.245E-002, 4.572E-002, 6.287E-002, 8.548E-002, 1.198E-001, 1.690E-001, 2.210E-001, 2.760E-001, 3.120E-001, 3.470E-001, 3.880E-001, 4.380E-001])


    wls2016 = np.array([3.200000000000000000e+02,3.400000000000000000e+02,3.600000000000000000e+02,3.800000000000000000e+02,
        4.000000000000000000e+02,4.200000000000000000e+02,4.400000000000000000e+02,4.600000000000000000e+02,
        4.800000000000000000e+02,5.000000000000000000e+02,5.200000000000000000e+02,5.400000000000000000e+02,
        5.600000000000000000e+02,5.800000000000000000e+02,6.000000000000000000e+02,6.200000000000000000e+02,
        6.400000000000000000e+02,6.600000000000000000e+02,6.800000000000000000e+02,7.000000000000000000e+02,
        7.200000000000000000e+02,7.400000000000000000e+02,7.600000000000000000e+02,7.800000000000000000e+02,
        8.000000000000000000e+02,8.200000000000000000e+02,
        8.400000000000000000e+02,8.600000000000000000e+02,8.800000000000000000e+02])


    ki2016_clean_i = np.array([3.041487403440475829e-02,2.558272285626620249e-02,2.144323464680263427e-02,
        1.966027550507608301e-02,1.826842368980735945e-02,1.594453920414467402e-02,
        1.679881743174194836e-02,1.904878851558649763e-02,2.291256148467402456e-02,
        2.901925308126920150e-02,3.791687935792471126e-02,5.056963082124795589e-02,
        6.955210975280588792e-02,9.330567411064784322e-02,1.259386612159429097e-01,
        1.719124790500090039e-01,2.369495806926282533e-01,3.038263655694493637e-01,
        3.660356928976859492e-01,4.585993184605350326e-01,5.746115436044209046e-01,
        6.689121357450086292e-01,8.452554973700255880e-01,1.119367730944526684e+00,
        2.225130694838257650e+00,2.324869799100645285e+00,2.301312585240918196e+00,
        3.252546517114971447e+00,4.998999124253487913e+00])




    sini = np.sin(np.arccos(cos_sza))
    theta = np.degrees(np.arccos(-cos_sza**2 + sini**2 * np.cos(np.radians(180))))


    # Get wavelengths in correct units
    wavelengths = 1064*1e-9

    # Get ice and soot imag indices
    refice2016_i = ki2016_clean_i/(4*np.pi)*(wls2016*1e-9)


    r2008_i = np.exp(np.interp(np.log(wavelengths*1e9), np.log(wl2008), np.log(refice2008_i)))

    wls_nm = wavelengths*1e9
    r2016_i = np.exp(np.interp(np.log(wls_nm), np.log(wls2016), np.log(refice2016_i)))

    use_2016 = (wls_nm <= wls2016[-1])
    k_ice = np.where(use_2016, r2016_i, r2008_i)

    # r0 - semi-infinite non-absorbing snow layer
    p = 11.1 * np.exp(-0.087 * theta) + 1.1 * np.exp(-0.014 * theta)
    r0 = (1.247 + 1.186 * (cos_sza + cos_sza) + 5.157 * cos_sza * cos_sza + p) / 4.0 / (cos_sza + cos_sza)
    
    # Compute SSA
    eps =  (9*(1-g)) / (16*b)
    gamma_i = (4 * np.pi * k_ice) / wavelengths
    ssa = (6 * gamma_i) / (917 * eps * (-np.log(rfl_1064 / r0))**2)

    return float(ssa)